!function(root,factory){"use strict";if("undefined"!=typeof module&&module.exports){factory("undefined"==typeof angular?require("angular"):angular,"undefined"==typeof moment?require("moment"):moment),module.exports="ui.bootstrap.datetimepicker"}else"function"==typeof define&&define.amd?define(["angular","moment"],factory):factory(root.angular,root.moment)}(this,function(angular,moment){"use strict";function DatetimepickerDirective(defaultConfig,configurationValidator){function DirectiveController($scope,$element,$attrs){function changeView(viewName,dateObject,event){if(event&&(event.stopPropagation(),event.preventDefault()),viewName&&dateObject.utcDateValue>-1/0&&dateObject.selectable&&viewToModelFactory[viewName]){var result=viewToModelFactory[viewName](dateObject.utcDateValue),weekDates=[];if(result.weeks)for(var i=0;i<result.weeks.length;i+=1)for(var week=result.weeks[i],j=0;j<week.dates.length;j+=1){var weekDate=week.dates[j];weekDates.push(weekDate)}$scope.beforeRender({$view:result.currentView,$dates:result.dates||weekDates,$leftDate:result.leftDate,$upDate:result.previousViewDate,$rightDate:result.rightDate}),$scope.data=result}}function yearModelFactory(milliseconds){for(var selectedDate=moment.utc(milliseconds).startOf("year"),startDecade=10*parseInt(selectedDate.year()/10,10),startDate=moment.utc(startOfDecade(milliseconds)).subtract(1,"year").startOf("year"),yearFormat="YYYY",activeFormat=formatValue(ngModelController.$modelValue,yearFormat),currentFormat=moment().format(yearFormat),result={currentView:"year",nextView:"year"===configuration.minView?"setTime":"month",previousViewDate:new DateObject({utcDateValue:null,display:startDecade+"-"+(startDecade+9)}),leftDate:new DateObject({utcDateValue:moment.utc(startDate).subtract(9,"year").valueOf()}),rightDate:new DateObject({utcDateValue:moment.utc(startDate).add(11,"year").valueOf()}),dates:[]},i=0;i<12;i+=1){var yearMoment=moment.utc(startDate).add(i,"years"),dateValue={active:yearMoment.format(yearFormat)===activeFormat,current:yearMoment.format(yearFormat)===currentFormat,display:yearMoment.format(yearFormat),future:yearMoment.year()>startDecade+9,past:yearMoment.year()<startDecade,utcDateValue:yearMoment.valueOf()};result.dates.push(new DateObject(dateValue))}return result}function monthModelFactory(milliseconds){for(var startDate=moment.utc(milliseconds).startOf("year"),previousViewDate=startOfDecade(milliseconds),monthFormat="YYYY-MMM",activeFormat=formatValue(ngModelController.$modelValue,monthFormat),currentFormat=moment().format(monthFormat),result={previousView:"year",currentView:"month",nextView:"month"===configuration.minView?"setTime":"day",previousViewDate:new DateObject({utcDateValue:previousViewDate.valueOf(),display:startDate.format("YYYY")}),leftDate:new DateObject({utcDateValue:moment.utc(startDate).subtract(1,"year").valueOf()}),rightDate:new DateObject({utcDateValue:moment.utc(startDate).add(1,"year").valueOf()}),dates:[]},i=0;i<12;i+=1){var monthMoment=moment.utc(startDate).add(i,"months"),dateValue={active:monthMoment.format(monthFormat)===activeFormat,current:monthMoment.format(monthFormat)===currentFormat,display:monthMoment.format("MMM"),utcDateValue:monthMoment.valueOf()};result.dates.push(new DateObject(dateValue))}return result}function dayModelFactory(milliseconds){for(var selectedDate=moment.utc(milliseconds),startOfMonth=moment.utc(selectedDate).startOf("month"),previousViewDate=moment.utc(selectedDate).startOf("year"),endOfMonth=moment.utc(selectedDate).endOf("month"),startDate=moment.utc(startOfMonth).subtract(Math.abs(startOfMonth.weekday()),"days"),dayFormat="YYYY-MMM-DD",activeFormat=formatValue(ngModelController.$modelValue,dayFormat),currentFormat=moment().format(dayFormat),result={previousView:"month",currentView:"day",nextView:"day"===configuration.minView?"setTime":"hour",previousViewDate:new DateObject({utcDateValue:previousViewDate.valueOf(),display:startOfMonth.format("YYYY-MMM")}),leftDate:new DateObject({utcDateValue:moment.utc(startOfMonth).subtract(1,"months").valueOf()}),rightDate:new DateObject({utcDateValue:moment.utc(startOfMonth).add(1,"months").valueOf()}),dayNames:[],weeks:[]},dayNumber=0;dayNumber<7;dayNumber+=1)result.dayNames.push(moment.utc().weekday(dayNumber).format("dd"));for(var i=0;i<6;i+=1){for(var week={dates:[]},j=0;j<7;j+=1){var dayMoment=moment.utc(startDate).add(7*i+j,"days"),dateValue={active:dayMoment.format(dayFormat)===activeFormat,current:dayMoment.format(dayFormat)===currentFormat,display:dayMoment.format("D"),future:dayMoment.isAfter(endOfMonth),past:dayMoment.isBefore(startOfMonth),utcDateValue:dayMoment.valueOf()};week.dates.push(new DateObject(dateValue))}result.weeks.push(week)}return result}function hourModelFactory(milliseconds){for(var selectedDate=moment.utc(milliseconds).startOf("day"),previousViewDate=moment.utc(selectedDate).startOf("month"),hourFormat="YYYY-MM-DD H",activeFormat=formatValue(ngModelController.$modelValue,hourFormat),currentFormat=moment().format(hourFormat),result={previousView:"day",currentView:"hour",nextView:"hour"===configuration.minView?"setTime":"minute",previousViewDate:new DateObject({utcDateValue:previousViewDate.valueOf(),display:selectedDate.format("ll")}),leftDate:new DateObject({utcDateValue:moment.utc(selectedDate).subtract(1,"days").valueOf()}),rightDate:new DateObject({utcDateValue:moment.utc(selectedDate).add(1,"days").valueOf()}),dates:[]},i=0;i<24;i+=1){var hourMoment=moment.utc(selectedDate).add(i,"hours"),dateValue={active:hourMoment.format(hourFormat)===activeFormat,current:hourMoment.format(hourFormat)===currentFormat,display:hourMoment.format("LT"),utcDateValue:hourMoment.valueOf()};result.dates.push(new DateObject(dateValue))}return result}function minuteModelFactory(milliseconds){for(var selectedDate=moment.utc(milliseconds).startOf("hour"),previousViewDate=moment.utc(selectedDate).startOf("day"),minuteFormat="YYYY-MM-DD H:mm",activeFormat=formatValue(ngModelController.$modelValue,minuteFormat),currentFormat=moment().format(minuteFormat),result={previousView:"hour",currentView:"minute",nextView:"setTime",previousViewDate:new DateObject({utcDateValue:previousViewDate.valueOf(),display:selectedDate.format("lll")}),leftDate:new DateObject({utcDateValue:moment.utc(selectedDate).subtract(1,"hours").valueOf()}),rightDate:new DateObject({utcDateValue:moment.utc(selectedDate).add(1,"hours").valueOf()}),dates:[]},limit=60/configuration.minuteStep,i=0;i<limit;i+=1){var hourMoment=moment.utc(selectedDate).add(i*configuration.minuteStep,"minute"),dateValue={active:hourMoment.format(minuteFormat)===activeFormat,current:hourMoment.format(minuteFormat)===currentFormat,display:hourMoment.format("LT"),utcDateValue:hourMoment.valueOf()};result.dates.push(new DateObject(dateValue))}return result}function setTime(milliseconds){var tempDate=new Date(milliseconds),newDate=new Date(tempDate.getUTCFullYear(),tempDate.getUTCMonth(),tempDate.getUTCDate(),tempDate.getUTCHours(),tempDate.getUTCMinutes(),tempDate.getUTCSeconds(),tempDate.getUTCMilliseconds());switch(configuration.modelType){case"Date":break;case"moment":newDate=moment([tempDate.getUTCFullYear(),tempDate.getUTCMonth(),tempDate.getUTCDate(),tempDate.getUTCHours(),tempDate.getUTCMinutes(),tempDate.getUTCSeconds(),tempDate.getUTCMilliseconds()]);break;case"milliseconds":newDate=milliseconds;break;default:newDate=moment([tempDate.getUTCFullYear(),tempDate.getUTCMonth(),tempDate.getUTCDate(),tempDate.getUTCHours(),tempDate.getUTCMinutes(),tempDate.getUTCSeconds(),tempDate.getUTCMilliseconds()]).format(configuration.modelType)}var oldDate=ngModelController.$modelValue;return ngModelController.$setViewValue(newDate),configuration.dropdownSelector&&jQuery(configuration.dropdownSelector).dropdown("toggle"),$scope.onSetTime({newDate:newDate,oldDate:oldDate}),viewToModelFactory[configuration.startView](milliseconds)}function $render(){$scope.changeView(configuration.startView,new DateObject({utcDateValue:getUTCTime(ngModelController.$viewValue)}))}function startOfDecade(milliseconds){var startYear=10*parseInt(moment.utc(milliseconds).year()/10,10);return moment.utc(milliseconds).year(startYear).startOf("year")}function formatValue(timeValue,formatString){return timeValue?getMoment(timeValue).format(formatString):""}function getMoment(modelValue){return moment(modelValue,angular.isString(modelValue)?configuration.parseFormat:void 0)}function getUTCTime(modelValue){var tempDate=new Date;if(modelValue){var tempMoment=getMoment(modelValue);if(!tempMoment.isValid())throw new Error("Invalid date: "+modelValue);tempDate=tempMoment.toDate()}return tempDate.getTime()-6e4*tempDate.getTimezoneOffset()}function createConfiguration(){var directiveConfig={};$attrs.datetimepickerConfig&&(directiveConfig=$scope.$parent.$eval($attrs.datetimepickerConfig));var configuration=angular.extend({},defaultConfig,directiveConfig);return configurationValidator.validate(configuration),configuration}var ngModelController=$element.controller("ngModel"),configuration=createConfiguration();$scope.screenReader=configuration.screenReader,$scope.changeView=changeView,ngModelController.$render=$render,configuration.configureOn&&$scope.$on(configuration.configureOn,function(){configuration=createConfiguration(),$scope.screenReader=configuration.screenReader,ngModelController.$render()}),configuration.renderOn&&$scope.$on(configuration.renderOn,ngModelController.$render);var viewToModelFactory={year:yearModelFactory,month:monthModelFactory,day:dayModelFactory,hour:hourModelFactory,minute:minuteModelFactory,setTime:setTime}}function DateObject(){var tempDate=new Date(arguments[0].utcDateValue),localOffset=6e4*tempDate.getTimezoneOffset();this.utcDateValue=tempDate.getTime(),this.selectable=!0,this.localDateValue=function(){return this.utcDateValue+localOffset};var validProperties=["active","current","display","future","past","selectable","utcDateValue"],constructorObject=arguments[0];Object.keys(constructorObject).filter(function(key){return validProperties.indexOf(key)>=0}).forEach(function(key){this[key]=constructorObject[key]},this)}var directiveDefinition={bindToController:!1,controller:DirectiveController,controllerAs:"dateTimePickerController",replace:!0,require:"ngModel",restrict:"E",scope:{beforeRender:"&",onSetTime:"&"},templateUrl:"templates/datetimepicker.html"};return DirectiveController.$inject=["$scope","$element","$attrs"],directiveDefinition}function DateTimePickerConfigProvider(){var defaultConfiguration={configureOn:null,dropdownSelector:null,minuteStep:5,minView:"minute",modelType:"Date",parseFormat:"YYYY-MM-DDTHH:mm:ss.SSSZZ",renderOn:null,startView:"day"},defaultLocalization={bg:{previous:"предишна",next:"следваща"},ca:{previous:"anterior",next:"següent"},da:{previous:"forrige",next:"næste"},de:{previous:"vorige",next:"weiter"},"en-au":{previous:"previous",next:"next"},"en-gb":{previous:"previous",next:"next"},en:{previous:"previous",next:"next"},"es-us":{previous:"atrás",next:"siguiente"},es:{previous:"atrás",next:"siguiente"},fi:{previous:"edellinen",next:"seuraava"},fr:{previous:"précédent",next:"suivant"},hu:{previous:"előző",next:"következő"},it:{previous:"precedente",next:"successivo"},ja:{previous:"前へ",next:"次へ"},ml:{previous:"മുൻപുള്ളത്",next:"അടുത്തത്"},nl:{previous:"vorige",next:"volgende"},pl:{previous:"poprzednia",next:"następna"},"pt-br":{previous:"anteriores",next:"próximos"},pt:{previous:"anterior",next:"próximo"},ro:{previous:"anterior",next:"următor"},ru:{previous:"предыдущая",next:"следующая"},sk:{previous:"predošlá",next:"ďalšia"},sv:{previous:"föregående",next:"nästa"},tr:{previous:"önceki",next:"sonraki"},uk:{previous:"назад",next:"далі"},"zh-cn":{previous:"上一页",next:"下一页"},"zh-tw":{previous:"上一頁",next:"下一頁"}},screenReader=defaultLocalization[moment.locale().toLowerCase()];return angular.extend({},defaultConfiguration,{screenReader:screenReader})}function DateTimePickerValidatorService($log){function validator(configuration){var validOptions=["configureOn","dropdownSelector","minuteStep","minView","modelType","parseFormat","renderOn","startView","screenReader"],invalidOptions=Object.keys(configuration).filter(function(key){return validOptions.indexOf(key)<0});if(invalidOptions.length)throw new Error("Invalid options: "+invalidOptions.join(", "));var validViews=["minute","hour","day","month","year"];if(validViews.indexOf(configuration.startView)<0)throw new Error("invalid startView value: "+configuration.startView);if(validViews.indexOf(configuration.minView)<0)throw new Error("invalid minView value: "+configuration.minView);if(validViews.indexOf(configuration.minView)>validViews.indexOf(configuration.startView))throw new Error("startView must be greater than minView");if(!angular.isNumber(configuration.minuteStep))throw new Error("minuteStep must be numeric");if(configuration.minuteStep<=0||configuration.minuteStep>=60)throw new Error("minuteStep must be greater than zero and less than 60");if(null!==configuration.configureOn&&!angular.isString(configuration.configureOn))throw new Error("configureOn must be a string");if(null!==configuration.configureOn&&configuration.configureOn.length<1)throw new Error("configureOn must not be an empty string");if(null!==configuration.renderOn&&!angular.isString(configuration.renderOn))throw new Error("renderOn must be a string");if(null!==configuration.renderOn&&configuration.renderOn.length<1)throw new Error("renderOn must not be an empty string");if(null!==configuration.modelType&&!angular.isString(configuration.modelType))throw new Error("modelType must be a string");if(null!==configuration.modelType&&configuration.modelType.length<1)throw new Error("modelType must not be an empty string");if("Date"!==configuration.modelType&&"moment"!==configuration.modelType&&"milliseconds"!==configuration.modelType&&(configuration.parseFormat=configuration.modelType),null!==configuration.dropdownSelector&&!angular.isString(configuration.dropdownSelector))throw new Error("dropdownSelector must be a string");null===configuration.dropdownSelector||"undefined"!=typeof jQuery&&"function"==typeof jQuery().dropdown||($log.error("Please DO NOT specify the dropdownSelector option unless you are using jQuery AND Bootstrap.js. Please include jQuery AND Bootstrap.js, or write code to close the dropdown in the on-set-time callback. \n\nThe dropdownSelector configuration option is being removed because it will not function properly."),delete configuration.dropdownSelector)}return{validate:validator}}angular.module("ui.bootstrap.datetimepicker",[]).service("dateTimePickerConfig",DateTimePickerConfigProvider).service("dateTimePickerValidator",DateTimePickerValidatorService).directive("datetimepicker",DatetimepickerDirective),DatetimepickerDirective.$inject=["dateTimePickerConfig","dateTimePickerValidator"],DateTimePickerValidatorService.$inject=["$log"]});
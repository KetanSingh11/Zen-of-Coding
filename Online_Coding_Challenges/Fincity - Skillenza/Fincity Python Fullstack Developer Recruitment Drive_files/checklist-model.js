"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="checklist-model"),angular.module("checklist-model",[]).directive("checklistModel",["$parse","$compile",function($parse,$compile){function contains(arr,item,comparator){if(angular.isArray(arr))for(var i=arr.length;i--;)if(comparator(arr[i],item))return!0;return!1}function add(arr,item,comparator){return arr=angular.isArray(arr)?arr:[],contains(arr,item,comparator)||arr.push(item),arr}function remove(arr,item,comparator){if(angular.isArray(arr))for(var i=arr.length;i--;)if(comparator(arr[i],item)){arr.splice(i,1);break}return arr}function postLinkFn(scope,elem,attrs){function destroy(){unbindModel(),unbindCheckListValue(),unbindDestroy()}function getChecklistValue(){return attrs.checklistValue?$parse(attrs.checklistValue)(scope.$parent):attrs.value}function setValueInChecklistModel(value,checked){var current=checklistModelGetter(scope.$parent);angular.isFunction(checklistModelGetter.assign)&&(!0===checked?checklistModelGetter.assign(scope.$parent,add(current,value,comparator)):checklistModelGetter.assign(scope.$parent,remove(current,value,comparator)))}function setChecked(newArr,oldArr){if(checklistBeforeChange&&!1===checklistBeforeChange(scope))return void setValueInChecklistModel(getChecklistValue(),ngModelGetter(scope));ngModelGetter.assign(scope,contains(newArr,getChecklistValue(),comparator))}var checklistModel=attrs.checklistModel;attrs.$set("checklistModel",null),$compile(elem)(scope),attrs.$set("checklistModel",checklistModel);var checklistModelGetter=$parse(checklistModel),checklistChange=$parse(attrs.checklistChange),checklistBeforeChange=$parse(attrs.checklistBeforeChange),ngModelGetter=$parse(attrs.ngModel),comparator=angular.equals;if(attrs.hasOwnProperty("checklistComparator"))if("."==attrs.checklistComparator[0]){var comparatorExpression=attrs.checklistComparator.substring(1);comparator=function(a,b){return a[comparatorExpression]===b[comparatorExpression]}}else comparator=$parse(attrs.checklistComparator)(scope.$parent);var unbindModel=scope.$watch(attrs.ngModel,function(newValue,oldValue){if(newValue!==oldValue){if(checklistBeforeChange&&!1===checklistBeforeChange(scope))return void ngModelGetter.assign(scope,contains(checklistModelGetter(scope.$parent),getChecklistValue(),comparator));setValueInChecklistModel(getChecklistValue(),newValue),checklistChange&&checklistChange(scope)}}),unbindCheckListValue=scope.$watch(getChecklistValue,function(newValue,oldValue){if(newValue!=oldValue&&angular.isDefined(oldValue)&&!0===scope[attrs.ngModel]){var current=checklistModelGetter(scope.$parent);checklistModelGetter.assign(scope.$parent,remove(current,oldValue,comparator)),checklistModelGetter.assign(scope.$parent,add(current,newValue,comparator))}},!0),unbindDestroy=scope.$on("$destroy",destroy);angular.isFunction(scope.$parent.$watchCollection)?scope.$parent.$watchCollection(checklistModel,setChecked):scope.$parent.$watch(checklistModel,setChecked,!0)}return{restrict:"A",priority:1e3,terminal:!0,scope:!0,compile:function(tElement,tAttrs){if(!tAttrs.checklistValue&&!tAttrs.value)throw"You should provide `value` or `checklist-value`.";return tAttrs.ngModel||tAttrs.$set("ngModel","checked"),postLinkFn}}}]);